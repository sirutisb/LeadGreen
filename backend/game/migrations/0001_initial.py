# Generated by Django 5.1.6 on 2025-03-13 18:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Insect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('level', models.IntegerField(default=1)),
                ('spawn_chance', models.FloatField(default=0.2)),
                ('image', models.ImageField(null=True, upload_to='insects/')),
            ],
        ),
        migrations.CreateModel(
            name='ItemEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('effect_type', models.CharField(choices=[('GROW', 'Grow Tree'), ('REMOVE_INSECT', 'Remove Insect'), ('ADD_POINTS', 'Add Points'), ('SPAWN_INSECT', 'Spawn Insect'), ('SPECIAL', 'Special Effect'), ('COMBO_BOOST', 'Combo Boost'), ('TEMPORARY_SHIELD', 'Temporary Shield'), ('MULTIPLIER', 'Point Multiplier'), ('RANDOM_REWARD', 'Random Reward'), ('TIME_BOOST', 'Time Boost')], max_length=32)),
                ('parameters', models.JSONField(default=dict, help_text='Effect-specific parameters (e.g. growth_amount, points, chances)')),
            ],
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('level', models.IntegerField(unique=True)),
                ('image', models.ImageField(null=True, upload_to='plants/')),
            ],
            options={
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('option', models.CharField(max_length=32)),
                ('weight', models.FloatField()),
                ('style', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.TextField(default='')),
                ('price', models.IntegerField(default=0)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('item_type', models.CharField(choices=[('TOOL', 'Tool'), ('CONSUMABLE', 'Consumable'), ('SPECIAL', 'Special')], max_length=20)),
                ('cooldown_seconds', models.IntegerField(default=0)),
                ('effects', models.ManyToManyField(related_name='items', to='game.itemeffect')),
            ],
        ),
        migrations.CreateModel(
            name='GameProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_balance', models.IntegerField(default=0)),
                ('lifetime_points', models.IntegerField(default=0)),
                ('tree_level', models.IntegerField(default=1)),
                ('tree_growth', models.FloatField(default=0.0)),
                ('last_insect_spawn', models.DateTimeField(blank=True, null=True)),
                ('spins', models.IntegerField(default=0)),
                ('combo_multiplier', models.FloatField(default=1.0)),
                ('combo_expires_at', models.DateTimeField(blank=True, null=True)),
                ('shield_expires_at', models.DateTimeField(blank=True, null=True)),
                ('point_multiplier', models.FloatField(default=1.0)),
                ('point_multiplier_expires_at', models.DateTimeField(blank=True, null=True)),
                ('growth_speed_multiplier', models.FloatField(default=1.0)),
                ('growth_speed_expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game_profile', to=settings.AUTH_USER_MODEL)),
                ('current_insect', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.insect')),
                ('current_plant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='game.plant')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('total_price', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.item')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'unique_together': {('user', 'item')},
            },
        ),
    ]
